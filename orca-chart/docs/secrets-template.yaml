# Kubernetes Secrets Templates for Orca Chart

# PostgreSQL Secret
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: orca-${ENVIRONMENT}
type: Opaque
data:
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_BASE64}  # echo -n 'password' | base64
  postgres-password: ${POSTGRES_PASSWORD_BASE64}
  password: ${POSTGRES_PASSWORD_BASE64}
  replication-password: ${POSTGRES_PASSWORD_BASE64}

---
# Container Registry Secret
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: orca-${ENVIRONMENT}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ${DOCKER_CONFIG_JSON_BASE64}
  # Generate with: kubectl create secret docker-registry registry-secret \
  #   --docker-server=your-registry.azurecr.io \
  #   --docker-username=your-username \
  #   --docker-password=your-password \
  #   --dry-run=client -o yaml | base64 -w 0

---
# Airflow Webserver Secret
apiVersion: v1
kind: Secret
metadata:
  name: airflow-webserver-secret
  namespace: orca-${ENVIRONMENT}
type: Opaque
data:
  webserver-secret-key: ${AIRFLOW_SECRET_KEY_BASE64}  # python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())" | base64

---
# Airflow Database Connection Secret
apiVersion: v1
kind: Secret
metadata:
  name: airflow-db-secret
  namespace: orca-${ENVIRONMENT}
type: Opaque
data:
  connection: ${AIRFLOW_DB_CONNECTION_BASE64}
  # Format: postgresql://username:password@hostname:port/database

---
# Redis Secret (if using external Redis)
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: orca-${ENVIRONMENT}
type: Opaque
data:
  redis-password: ${REDIS_PASSWORD_BASE64}

---
# Spark Configuration Secret
apiVersion: v1
kind: Secret
metadata:
  name: spark-secret
  namespace: orca-${ENVIRONMENT}
type: Opaque
data:
  spark-defaults.conf: ${SPARK_CONFIG_BASE64}

---
# SSL/TLS Certificates (for production)
apiVersion: v1
kind: Secret
metadata:
  name: orca-tls-secret
  namespace: orca-${ENVIRONMENT}
type: kubernetes.io/tls
data:
  tls.crt: ${TLS_CERT_BASE64}
  tls.key: ${TLS_KEY_BASE64}

---
# Monitoring Secrets
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secret
  namespace: orca-${ENVIRONMENT}
type: Opaque
data:
  admin-password: ${GRAFANA_ADMIN_PASSWORD_BASE64}
  admin-user: ${GRAFANA_ADMIN_USER_BASE64}

---
# Backup Configuration Secret
apiVersion: v1
kind: Secret
metadata:
  name: backup-secret
  namespace: orca-${ENVIRONMENT}
type: Opaque
data:
  aws-access-key-id: ${AWS_ACCESS_KEY_ID_BASE64}
  aws-secret-access-key: ${AWS_SECRET_ACCESS_KEY_BASE64}
  bucket-name: ${S3_BUCKET_NAME_BASE64}

---
# SMTP Configuration Secret (for notifications)
apiVersion: v1
kind: Secret
metadata:
  name: smtp-secret
  namespace: orca-${ENVIRONMENT}
type: Opaque
data:
  smtp-host: ${SMTP_HOST_BASE64}
  smtp-port: ${SMTP_PORT_BASE64}
  smtp-user: ${SMTP_USER_BASE64}
  smtp-password: ${SMTP_PASSWORD_BASE64}